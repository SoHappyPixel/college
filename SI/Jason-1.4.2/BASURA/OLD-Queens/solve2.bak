/* Initial beliefs */
iterator(Y,Y,L,R):-
	lookfor(Y,Y,L,R,Y).
iterator(X,Y,L,K):-
	X1=X+1 &
	link(MF,R,K)&
	lookfor(X,Y,L,MF,Y) &
	iterator(X1,Y,L,R).

lookfor(X,0,L,[],S):-
	threat([X,0],L,S).
lookfor(X,0,_,[[X,0]],_).
lookfor(X,Y,L,MF,S):-
	Y1=Y-1 &
	threat([X,Y],L,S) &
	lookfor(X,Y1,L,MF,S).
lookfor(X,Y,L,[[X,Y]|MF],S):-
	Y1=Y-1 &
	lookfor(X,Y1,L,MF,S).

threat([],[],_).
threat([X,_],[[X,_]|_],_).
threat([_,Y],[[_,Y]|_],_).
threat(Q,[Car|Cdr],P):-
	threat(Q,Cdr,P)|
	checkloop(Q,P,[Car|Cdr]).
checkloop([X1,X2],P,[[C1,C2]|R]):-
	check(X1,X2,P,[[C1,C2]|R])|
	onemore([X1,X2],P,[[C1,C2]|R]).

onemore([X1,X2],P,[[C1,C2]|R]):-
	P>0 &
	P1=P-1 &
	checkloop([X1,X2],P1,[[C1,C2]|R]).
check(X1,X2,P,[[C1,C2]|R]):-
	X1=C1+P & X2=C2+P |
	X1=C1-P & X2=C2+P |
	X1=C1+P & X2=C2-P |
	X1=C1-P & X2=C2-P |
	X1==C1 & X2==C2.

parser([Y,X],X,Y).

link([], Cs, Cs).
link([A|As],Bs,[A|Cs]):-
	link(As, Bs, Cs).

selectrand(L,N,E):-
	select(L,N,E).
select([Car|Cdr],0,Car).
select([Car|Cdr],N,X):-
	N1=N-1 &
	select(Cdr,N1,X).

depth([],0).
depth([_|T],N):-
	depth(T,N0) & N=N0 + 1.

empty([]).

/* Initial goal */
!start.
/* Plans */
+!start: true <- !solve.

+player(1) <- .wait({+player(0)}

+player(0) <-
	!solve;
	-player(0)[source(percept)].

+!solve: true <-
	?size(S);
	.findall([PosX,PosY],queen(PosX,PosY),All);
	?iterator(0,S-1,All,Free);
	?depth(Free,Next);
	!randval(Next-1,Rand);
	?selectrand(Free,Rand,Towards);
	?parser(Towards,GotoX,GotoY);
	move_towards(GotoX,GotoY);
	put(queen);
	.wait(500);
	.findall([PosX,PosY],queen(PosX,PosY),End);
	.print("La lista final es: ", End).

+!randval(E,R)<- .random(T1); T2=T1*E; R=math.round(T2).
+!getFree() <- ?size(S); .findall([PosX,PosY],queen(PosX,PosY),All); ?iterator(0,S-1,All,Free).
